#!/bin/bash

version=3.2.10
cvmfsdir=/cvmfs/alice.cern.ch
path=`dirname $0`
path=`cd "$path";pwd`
[[ `basename "$path"` == bin ]] && cvmfsdir=`dirname "$path"`
printvar=""

Eval(){
   cmd=$*
   ret=`$cmd`
   if [ "x$ret" != x ]
   then
      eval $ret
   else
      return 1
   fi
}

os_release=/etc/os-release
which lsb_release > /dev/null 2>&1
if [[ $? == 0 ]] ; then
  distro_name=`lsb_release -i | sed -e 's/.*://' -e 's/[ \t]*//g'`
  distro_release=`lsb_release -r | awk '{print $NF}'`
elif [[ -r "$os_release" ]] ; then
  distro_name=`source "$os_release" ; echo $NAME`
  distro_release=`source "$os_release" ; echo $VERSION_ID`
else
  distro_name='<unknown>'
  distro_release='<unknown>'
fi

[ x$ALIENV_DEBUG == x1 ] && printf "distro_name=$distro_name\ndistro_release=$distro_release\n" >&2

case $distro_name in
     Scientific*|CentOS*|RedHatEnterprise*)
        distro_dir="Scientific"
        uname_m=`uname -m`
        arch=${uname_m}-2.6-gnu-4.1.2
        case $distro_release in
           5.*)
              distro_xrelease=5.x
              platform=el5
              ;;
           6.*)
              distro_xrelease=6.x
              platform=el6
              ;;
           7*)
              distro_xrelease=6.x
              platform=el7
              ;;
        esac
        ;;
     Fedora*)
        distro_dir="Scientific"
        uname_m=`uname -m`
        arch=${uname_m}-2.6-gnu-4.1.2
        case $distro_release in
           17|18)
              distro_xrelease=6.x
              platform=el6
              ;;
           19|20|21)
              distro_xrelease=6.x
              platform=el7
              ;;
           *)
              distro_xrelease=6.x
              ;;
        esac
        ;;
     SUSE*)
        distro_dir="Scientific"
        uname_m=`uname -m`
        arch=${uname_m}-2.6-gnu-4.1.2
        case $distro_release in
           11) # Titan
              distro_xrelease=6.x
              platform=suse11
              ;;
           *)
              distro_xrelease=6.x
              ;;
        esac
        ;;
     Debian*)
        distro_dir="Scientific"
        uname_m=`uname -m`
        arch=${uname_m}-2.6-gnu-4.1.2
        case $distro_release in
           6.*|6|7.*|7)
              distro_xrelease=6.x
              ;;
           8.*|8)
              distro_xrelease=6.x
              platform=ubuntu1404
              ;;
        esac
        ;;
     Ubuntu*)
        distro_dir="Scientific"
        uname_m=`uname -m`
        arch=${uname_m}-2.6-gnu-4.1.2
        case $distro_release in
           13.*)
              distro_xrelease=6.x
              ;;
           14.*|15.*)
              distro_xrelease=6.x
              platform=ubuntu1404
              ;;
        esac
        ;;
     *)
      echo "Unknown distribution: $distro_name $distro_release"
      exit 1
     ;;
esac

[[ "$ALIENV_OVERRIDE_PLATFORM" != "" ]] && { printf "WARNING: overriding detected platform ($platform) with $ALIENV_OVERRIDE_PLATFORM\n" >&2; platform=$ALIENV_OVERRIDE_PLATFORM; }
[ x$ALIENV_DEBUG == x1 ] && printf "distro_dir=$distro_dir\nuname_m=$uname_m\narch=$arch\ndistro_xrelease=$distro_xrelease\nplatform=$platform\n" >&2

modules=$cvmfsdir/$arch/Modules

if [  ! -d $modules ]
then
   echo "Platform $distro_dir,$arch not supported"
   exit 1
fi

unset MODULESHOME

moduledirs="$modulepath $cvmfsdir/x86_64-2.6-gnu-4.1.2 $cvmfsdir/x86_64-2.6-gnu-4.7.2 $cvmfsdir/x86_64-2.6-gnu-4.8.3 $cvmfsdir/x86_64-2.6-gnu-4.8.4"
[ x$platform != x ] && moduledirs="$moduledirs $cvmfsdir/${platform}-${uname_m}"

function modulepath {
  local dir
  local colon
  local subdir
  subdir=$1; shift 1
  for dir in $MODULEPATH $*
  do
    if [ -d $dir/Modules/$subdir ]
    then
       printf "${colon}${dir}/Modules/${subdir}"
       colon=":"
    fi
  done
  printf "\n"
}

function test_toolchain {
  local TMPPREF=/tmp/alienv_helloworld
  cat > $TMPPREF.cpp <<EOF
#include <iostream>
int main(int argn, char *argv[]) {
  std::cout << "hello world" << std::endl;
  return 0;
}
EOF
  g++ -o $TMPPREF ${TMPPREF}.cpp > ${TMPPREF}.log 2>&1
  if [[ `/tmp/alienv_helloworld 2> /dev/null` != "hello world" ]]; then
    echo "WARNING: We are using GNU C++ compiler at $(which g++ 2> /dev/null)" >&2
    echo "WARNING: This compiler is unable to produce valid executables on this platform!" >&2
    echo "WARNING: Error from g++ follows:" >&2
    while IFS= read LINE; do
      echo "WARNING: $LINE" >&2
    done < <(cat ${TMPPREF}.log)
  else
    echo "NOTICE: loaded compiler ($(which g++)) seems to produce valid executables" >&2
  fi
  rm -f ${TMPPREF}*
}

# Old modulefiles were not loading AliEn automatically as a dependency. For
# those packages we must do it manually.
function load_alien_if_missing {
  local REQ_ALIEN="ROOT GEANT3 GEANT4 AliRoot AliPhysics"
  if ! $moduleenv $modulecmd bash -t list 2>&1 | grep -q AliEn-Runtime; then
    for PKG in $REQ_ALIEN; do
      if $moduleenv $modulecmd bash -t list 2>&1 | grep -q ^$PKG; then
        Eval $moduleenv $modulecmd bash load $alien$alien_version || return 1
        break
      fi
    done
  fi
  return 0
}

export MODULEPATH=$(modulepath modulefiles $moduledirs)
[ x$platform != x ] && MODULEPATH="$cvmfsdir/etc/toolchain/modulefiles/${platform}-${uname_m}:$MODULEPATH"
[ x$ALIENV_DEBUG == x1 ] && printf "MODULEPATH=$MODULEPATH\n" >&2

export PATH=$PATH:$path

if [  -d $modules/$version/$distro_dir/$distro_release ]
then
   moduleenv="env LD_LIBRARY_PATH=$modules/$version/$distro_dir/$distro_release/lib"
   modulecmd="$modules/$version/$distro_dir/$distro_release/bin/modulecmd"
else
   moduleenv="env LD_LIBRARY_PATH=$modules/$version/$distro_dir/$distro_xrelease/lib"
   modulecmd="$modules/$version/$distro_dir/$distro_xrelease/bin/modulecmd"
fi

if [ ! -f $modulecmd ]
then
      echo "Unknown distribution release: $distro_name $distro_release"
      exit 1
fi

tclsh <<EOF >/dev/null 2>&1
EOF

if [ $? -eq 0 ]
then
  moduleenv=""
fi

command=""

if [ "x$ALIEN_VERSION" = "x" ]
then
  alien_version=""
else
  alien_version="/$ALIEN_VERSION"
fi
alien="AliEn"

export ALIEN_ORGANISATION=$(tr "[:lower:]" "[:upper:]" <<< "${ALIEN_ORGANISATION:=ALICE}")

while [ $# -gt 0 ]
do
  case $1 in
     enter)
       shift 1
       args=`echo $1 | sed -e "s%VO_$ALIEN_ORGANISATION@%%g" -e 's%::%/%g' -e 's%,% %g'`
       before=`printenv`
       Eval $moduleenv $modulecmd bash load $args || exit 1
       load_alien_if_missing || exit 1
       after=`printenv | grep -v LS_COLORS=`
       _LM_ENV=""
       for var in $after
       do
         if [[ ! "$before"  =~ "$var" ]]
         then
            _LM_ENV="$var;$_LM_ENV"
         fi
       done
       export _LM_ENV
       if [ -f  $HOME/.alienvrc ]
       then
          alienvrc="--init-file $HOME/.alienvrc"
       else
          alienvrc=""
       fi
       [ x$ALIENV_DEBUG == x1 ] && test_toolchain
       exec env PS1="[$args] \W > " bash --norc $alienvrc -i
       ;;
     setenv)
       shift 1
       args=`echo $1 | sed -e "s%VO_$ALIEN_ORGANISATION@%%g" -e 's%::%/%g' -e 's%,% %g'`
       Eval $moduleenv $modulecmd bash load $args || exit 1
       load_alien_if_missing || exit 1
       [ x$ALIENV_DEBUG == x1 ] && test_toolchain
       shift 1
       ;;
     printenv)
       shift 1
       if [ x$1 = x ]
       then
          echo $_LM_ENV
       fi
       args=`echo $1 | sed -e "s%VO_$ALIEN_ORGANISATION@%%g" -e 's%::%/%g' -e 's%,% %g'`

       # Load AliEn only if no AliEn-Runtime is there
       toload="$args"
       ( Eval $moduleenv $modulecmd bash load $args || exit 1; \
         $moduleenv $modulecmd bash list 2>&1 | grep -q AliEn-Runtime ) || toload="$args $alien$alien_version"
       $moduleenv $modulecmd bash load $toload || exit 1

       exit
       ;;
     -print)
       shift 1
       var=$1
       echo ${!var}
       shift 1
       ;;
     -a|--archive)
       shift 1
       export MODULEPATH=$MODULEPATH:$(modulepath archive $moduledirs)
       ;;
     -c)
       shift 1
       args=`echo $1 | sed -e "s%VO_$ALIEN_ORGANISATION@%%g" -e 's%::%/%g' -e 's%,% %g'`
       exec env PS1="[$args] \W > " bash -c "$*"
       ;;
     -alien-version|--alien-version)
       shift 1
       alien_version="/$1"
       shift 1
       ;;
     -alien|--alien)
       shift 1
       Eval $moduleenv $modulecmd bash load $alien$alien_version || exit 1
       ;;
     -alien-services|--alien-services)
       shift 1
       alien_environment=`echo $1 | sed -e 's%,%; %g'`
       eval $alien_environment
       alien_services=`echo $2 | sed -e 's%,% %g'`
       Eval $modulecmd bash load $alien$alien_version || exit 1
       mkdir -p $HOME/.alien
       echo $alien_environment > $HOME/.alien/Environment
       echo "AliEnServices=$alien_services" > $HOME/.alien/etc/aliend/startup.conf
       exec  $ALIEN_ROOT/etc/rc.d/init.d/aliend start
       ;;
     q|query)
       $modulecmd bash -t avail  2>&1 | grep -v : | awk -v org=$ALIEN_ORGANISATION -F/ '{printf("VO_%s@%s::%s\n",org,$1,$2)}'
       exit $?
       ;;
     *)
       $modulecmd bash $*
       exit
     ;;
    esac
done
