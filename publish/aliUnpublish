#!/usr/bin/env python
from __future__ import print_function
import os, re
from sys import exit
from argparse import ArgumentParser
from subprocess import check_output,CalledProcessError
from datetime import datetime, timedelta
import pytz
import jinja2

ap = ArgumentParser()
ap.add_argument("--dry-run", "-n", dest="nworkers", default=False, action="store_true",
                help="Do not enact changes")
ap.add_argument("--toplevel", dest="toplevel", default="AliPhysics",
                help="Toplevel package (defaults to AliPhysics)")
ap.add_argument("--cvmfs", dest="cvmfs", default="/cvmfs/alice.cern.ch",
                help="CVMFS namespace (defaults to /cvmfs/alice.cern.ch)")
ap.add_argument("--older-than-days", dest="days", default=60, type=int,
                help="Remove tags older than those days")
ap.add_argument("--delete-extra", dest="delete_extra", default="$nope",
                help="Regexp forcing extra packages to be removed")
ap.add_argument("--no-archive", dest="archive", default=True, action="store_false",
                help="Remove CVMFS packages instead of archiving them")
args = ap.parse_args()

# Get a list with all "toplevel" packages. List contains versions only
os.environ["ALIENV_OVERRIDE_PLATFORM"] = "el5"
packages = [ x.split("::")[1]
             for x in check_output(["%s/bin/alienv" % args.cvmfs, "q"],
                                   stderr=open(os.devnull, "w"), close_fds=True).split("\n")
                   if re.search("^VO_ALICE@%s::.*-[1-9]+[0-9]{0,2}$" % args.toplevel, x) ]
packages.sort()

dt = datetime.now(pytz.timezone("Europe/Zurich")) - timedelta(days=args.days)
thr_date = int("%04d%02d%02d" % (dt.year,dt.month,dt.day))

skeep = "\033[32mKEEP\033[m"
sdele = "\033[31mDELE\033[m"

cur_month = 0
to_delete = []
now_str = datetime.utcnow().strftime("%Y%m%dT%H%M%S")
check = open("test-cleanup-"+now_str+".yaml", "w")
check.write("slc5_x86-64:\n  %s:\n" % args.toplevel)
for p in packages:
  keep = False if re.search(args.delete_extra, p) else True
  m = re.search("^vAN-([0-9]{8})", p)
  if keep and m:
    pkg_date = int(m.group(1))
    month = pkg_date/100
    keep = pkg_date >= thr_date or month != cur_month
    cur_month = month
  if not keep: to_delete.append(p)
  print("%s %s" % (skeep if keep else sdele, p))
  check.write("    \"%s\": %s\n" % (p, keep))

nkeep = len(packages)-len(to_delete)
print("%d %s versions found: %d to keep, %d to delete" % \
      (len(packages),args.toplevel,nkeep,len(to_delete)))

# Produce cleanup scripts
nfmt = "cleanup-%s-" + now_str + ".sh"
for ty in ["alien", "cvmfs"]:
  fn = nfmt%ty
  with open(fn, "w") as f:
    f.write(jinja2.Template(open("cleanup-%s.sh.jinja"%ty).read()).render(
      to_delete=[args.toplevel + " " + x for x in to_delete],
      remove=0 if args.archive else 1))
  os.chmod(fn, int("755", 8))
  print("Produced %s cleanup script: %s -- copy it to the production host and run it" % (ty, fn))
print("Adjust the publishing rules and test with:\n" \
      "  ./aliPublish --test test-cleanup-%s.yaml test-rules" % now_str)
