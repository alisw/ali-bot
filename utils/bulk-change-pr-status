#!/usr/bin/env python

'''Mark all failed PRs in a repo as pending.

Actually, any status can be changed to any other status.

Caveat: the check you want to change has to exist on GitHub already!

This script is useful when cleaning up after a stuck CI builder.
'''

from __future__ import print_function
from argparse import ArgumentParser, Namespace
from collections import defaultdict
from datetime import datetime, timezone
from sys import stderr

import alibot_helpers.github_utilities as ghutil


def get_all_statuses(cgh, repo, pull_hash):
    '''Create a list of all statuses for each check, newest first.'''
    statuses = defaultdict(list)
    for status in cgh.get('/repos/{repo}/commits/{ref}/statuses',
                          repo=repo, ref=pull_hash):
        statuses[status['context']].append(status)
    for status_list in statuses.values():
        status_list.sort(key=lambda status: status['updated_at'], reverse=True)
    return statuses


def parse_timestr(timestr):
    '''Parse a datetime string as returned by the GitHub API.'''
    return datetime.fromisoformat(timestr.replace('Z', '+00:00'))


def process_pr(cgh, args, repo, pull):
    '''Set the statuses on a single pull request.'''
    pull_hash = pull['head']['sha']
    for check, statuses in get_all_statuses(cgh, repo, pull_hash).items():
        if check not in args.check_name or not statuses:
            continue
        latest = statuses[0]
        try:
            if args.filter_after:
                before_last = [status for status in statuses
                               if parse_timestr(status['updated_at'])
                               <= args.filter_after][0]
            else:
                before_last = statuses[1]
        except IndexError:
            before_last = {'state': 'pending'}
        date = parse_timestr(latest['updated_at'])
        should_process = latest['state'] == args.from_status and \
            args.filter_after < date < args.filter_before
        to_status = args.to_status
        if args.delete_latest:
            to_status = before_last['state']
            # If we're resetting to an earlier error, the logs are gone now
            # (they get overwritten each time). Set to pending for fresh logs.
            if to_status in ('error', 'failure'):
                to_status = 'pending'
        new_url = ''
        if args.delete_latest:
            new_url = before_last.get('target_url', '')
        elif args.keep_urls:
            new_url = latest.get('target_url', '')
        message = args.message
        if args.delete_latest and 'updated_at' in before_last:
            message += ' (reset to status of %s)' % before_last['updated_at']
        elif args.delete_latest:
            message += ' (reset to pending)'
        if not should_process:
            # This isn't a status we should change.
            action = 'no change'
        elif not args.do_it:
            # -y not given, so only say what we would do.
            action = 'would change'
        else:
            # This is a status we want to change and we have -y, so do it.
            ghutil.setGithubStatus(cgh, Namespace(
                # Of the form org/repo#pr@sha, but setGithubStatus doesn't
                # use pr so we can leave it out.
                commit=repo + '@' + pull_hash,
                status=check + '/' + to_status,
                message=message, url=new_url
            ), debug_print=args.verbose)
            action = 'changed'

        # Log line to show what PR and check we're processing.
        pr_line = '{action:>13}: {repo}#{pr} @{date} {check}/{status}' \
            .format(action=action, repo=repo, pr=pull['number'], date=date,
                    check=check, status=latest['state'])
        if should_process:
            pr_line += ' -> {}    "{}"'.format(to_status, message)
        print(pr_line, file=stderr)


def main(args):
    '''Application entry point.'''
    cache = ghutil.PickledCache(args.github_cache_file)
    with ghutil.GithubCachedClient(cache=cache) as cgh:
        for repo in args.repo_name:
            for pull in cgh.get('/repos/{repo}/pulls', repo=repo):
                process_pr(cgh, args, repo, pull)

    if not args.do_it:
        print('', 'note: no statuses were changed',
              'note: pass -y/--do-it to really change the statuses',
              sep='\n', end='\n\n', file=stderr)


def parse_args():
    '''Parse and return command-line arguments.'''
    statuses = ('success', 'error', 'failure', 'pending')
    parser = ArgumentParser(description=__doc__, epilog='''\
    Note that you have to pass -y/--do-it to actually send any requested
    changes to GitHub! If that option isn't given, the script just prints
    out what it would do. DATE arguments are in the format understood by
    datetime.fromisoformat: YYYY-mm-dd[?HH[:MM[:SS[+HH:MM]]]] (? stands for
    any character; things in [] are optional). If no +HH:MM timezone offset is
    given, UTC is assumed.
    ''')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='print debug messages when changing statuses')
    parser.add_argument('-y', '--do-it', action='store_true',
                        help=("actually change the statuses, "
                              "don't just print what would be done"))
    parser.add_argument('-k', '--keep-urls', action='store_true',
                        help=("don't clear statuses' result URLs, for "
                              'inspection of previous build results'))
    parser.add_argument('-C', '--github-cache-file', metavar='GHCACHE',
                        default=ghutil.PickledCache.default_cache_location(),
                        help='GitHub cache location; default %(default)s')
    parser.add_argument('-b', '--before', metavar='DATE', type=datetime.fromisoformat,
                        default=datetime.now(), dest='filter_before',
                        help=('change only statuses last updated (strictly) '
                              'before %(metavar)s; default now'))
    parser.add_argument('-a', '--after', metavar='DATE', type=datetime.fromisoformat,
                        default=datetime(1970, 1, 1), dest='filter_after',
                        help=('change only statuses last updated (strictly) '
                              'after %(metavar)s; default %(default)s'))
    parser.add_argument('-f', '--from', metavar='FROM', choices=statuses,
                        default='error', dest='from_status',
                        help=('change checks with this status; '
                              'one of %(choices)s; default %(default)s'))
    to_arg = parser.add_mutually_exclusive_group()
    to_arg.add_argument('-t', '--to', metavar='TO', choices=statuses,
                        default='pending', dest='to_status',
                        help=('change matching statuses to this one; '
                              'one of %(choices)s; default %(default)s'))
    # Can't use -d as that's treated specially by alibot_helpers.
    to_arg.add_argument('-D', '--delete-latest', action='store_true', default=False,
                        help=('reset the status to what it was before the '
                              'current one, for statuses matching -f/--from. '
                              'Takes -a/--after into account, if given. '
                              'As a special case, previous error/failure '
                              'statuses will be reset to pending'))
    parser.add_argument('-m', '--message', default='',
                        help='optional short text to show with pending status')
    parser.add_argument('-r', '--repo-name', action='append', required=True,
                        help='repository slug, may be given multiple times')
    parser.add_argument('-c', '--check-name', action='append', required=True,
                        help='check name, may be given multiple times')
    args = parser.parse_args()
    if args.filter_before.tzinfo is None:
        args.filter_before = args.filter_before.replace(tzinfo=timezone.utc)
    if args.filter_after.tzinfo is None:
        args.filter_after = args.filter_after.replace(tzinfo=timezone.utc)
    return args


if __name__ == '__main__':
    main(parse_args())
