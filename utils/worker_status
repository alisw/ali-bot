#!/usr/bin/env python3
import argparse
import json
import os
import re
import subprocess
import sys
from concurrent.futures import ThreadPoolExecutor


def get_nomad_allocs(job_name):
    try:
        result = subprocess.run(
            [
                "nomad", "job", "allocs", "-t",
                "{{range .}}{{if eq .ClientStatus \"running\"}}{{println .Name .ID}}{{end}}{{end}}",
                job_name
            ],
            capture_output=True,
            text=True,
            check=True,
            timeout=10
        )
        allocs = [line for line in result.stdout.strip().split('\n') if line]
        return sorted(allocs)
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
        return []


def get_nomad_logs(alloc_id):
    try:
        result = subprocess.run(
            ["nomad", "alloc", "logs", "-n", "5000", alloc_id],
            capture_output=True,
            text=True,
            timeout=5
        )
        return result.stdout
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
        return ""


def gh_api(endpoint):
    try:
        result = subprocess.run(
            ["gh", "api", endpoint],
            capture_output=True,
            text=True,
            check=True,
            timeout=5
        )
        return json.loads(result.stdout)
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, json.JSONDecodeError):
        return None


def find_pr_by_commit(repo, commit):
    pr_response = gh_api(f"repos/{repo}/commits/{commit}/pulls")
    if pr_response and len(pr_response) > 0:
        pr_num = pr_response[0].get('number')
        pr_title = pr_response[0].get('title')
        if pr_num:
            return pr_num, pr_title
    
    pr_response = gh_api(f"search/issues?q=repo:{repo}+is:pr+{commit}")
    if pr_response and pr_response.get('total_count', 0) > 0:
        item = pr_response['items'][0]
        pr_num = item.get('number')
        pr_title = item.get('title')
        if pr_num:
            return pr_num, pr_title
    
    return None, None


def process_allocation(alloc_info):
    parts = alloc_info.split(None, 1)
    if len(parts) != 2:
        return ""
    
    alloc_name, alloc_id = parts
    alloc_short = alloc_id[:8]
    
    match = re.search(r'\[(\d+)\]', alloc_name)
    worker_idx = match.group(1) if match else "?"
    
    output = [f"Worker {worker_idx} ({alloc_short}):"]
    
    log_output = get_nomad_logs(alloc_id)
    
    build_match = None
    for line in reversed(log_output.split('\n')):
        if re.search(r'Started building check .* for .* on', line):
            build_match = line
            break
    
    if build_match:
        check_match = re.search(r'check (\S+) for', build_match)
        repo_match = re.search(r'for ([^@]+)@(\S+) on', build_match)
        time_match = re.search(r'([A-Z][a-z][a-z] \d{2}:\d{2} CET)', build_match)
        
        if check_match and repo_match:
            check_name = check_match.group(1)
            repo = repo_match.group(1)
            commit = repo_match.group(2)
            commit_short = commit[:8]
            build_time = time_match.group(1) if time_match else None
            
            output.append(f"  Building: {check_name}")
            output.append(f"  Repo:     {repo}")
            output.append(f"  Commit:   {commit_short}")
            if build_time:
                output.append(f"  Started:  {build_time}")
            
            pr_num, pr_title = find_pr_by_commit(repo, commit)
            if pr_num:
                output.append(f"  PR:       #{pr_num}: {pr_title}")
                output.append(f"  Link:     https://github.com/{repo}/pull/{pr_num}")
            else:
                output.append("  PR:       (branch build)")
        else:
            output.append("  Status: Building (details not parsed)")
    elif "aliBuild build" in log_output:
        output.append("  Status: Building (in progress)")
    elif "list-branch-pr" in '\n'.join(log_output.split('\n')[-5:]):
        output.append("  Status: Idle (waiting for work)")
    else:
        output.append("  Status: Unknown (check logs)")
    
    output.append(f"  Logs:   https://alinomad.cern.ch/ui/allocations/{alloc_id}")
    
    return '\n'.join(output)


def get_available_workers():
    try:
        result = subprocess.run(
            ["nomad", "job", "status"],
            capture_output=True,
            text=True,
            check=True,
            timeout=10
        )
        workers = []
        for line in result.stdout.strip().split('\n'):
            if line.startswith('ci-'):
                parts = line.split()
                if parts:
                    workers.append(parts[0])
        return sorted(workers)
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
        return []


def main():
    available_workers = get_available_workers()
    workers_list = "\n".join(f"  {w}" for w in available_workers) if available_workers else "  (unable to fetch workers)"
    
    parser = argparse.ArgumentParser(
        description="Shows what each CI builder instance is currently doing by checking GitHub statuses.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
Environment:
  NOMAD_TOKEN   Nomad API token
  GITHUB_TOKEN  GitHub API token

Available Workers:
{workers_list}

Examples:
  worker_status mesosci slc9
  worker_status mesosci slc9 -o2physics
  worker_status macos osx_arm64
"""
    )
    parser.add_argument("role", help="Mesos role, e.g. 'mesosci', 'mesosdaq', 'macos'")
    parser.add_argument("container", help="Container arch, e.g. 'slc9', 'ubuntu2204', 'osx_arm64'")
    parser.add_argument("suffix", nargs='?', default="", help="Optional suffix for multiple builders, e.g. '-o2physics'")
    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)
    
    args = parser.parse_args()
    
    if not os.getenv("NOMAD_TOKEN"):
      print("Error: NOMAD_TOKEN environment variable not set", file=sys.stderr)
      sys.exit(1)
    
    if not os.getenv("GITHUB_TOKEN"):
      print("Error: GITHUB_TOKEN environment variable not set", file=sys.stderr)
      sys.exit(1)

    
    if not subprocess.run(["which", "nomad"], capture_output=True).returncode == 0:
        print("Error: nomad command not found", file=sys.stderr)
        sys.exit(1)
    
    if not subprocess.run(["which", "gh"], capture_output=True).returncode == 0:
        print("Error: gh command not found", file=sys.stderr)
        sys.exit(1)
    
    job_name = f"ci-{args.role}-{args.container}{args.suffix}"
    
    allocs = get_nomad_allocs(job_name)
    
    if not allocs:
        print(f"No running allocations found for job: {job_name}")
        sys.exit(1)
    
    print(f"Job: {job_name} ({len(allocs)} workers)")
    print()
    
    with ThreadPoolExecutor() as executor:
        results = list(executor.map(process_allocation, allocs))
    
    for result in results:
        print(result)
        print()


if __name__ == "__main__":
    main()
