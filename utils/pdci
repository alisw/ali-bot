#!/bin/sh -e

help () {
  cat <<EOF
usage: $(basename "$0") [-ml] COMMAND [ARGS...]

Run a command inside all CI Nomad task directories simultaneously.

  -m       run on MacOS machines
  -l       run on Linux machines
  COMMAND  command to run
  ARGS...  optional arguments to COMMAND

ARGS will be quoted, but COMMAND will not be. If neither of -m, -l is given, -ml is assumed.
EOF
  exit "${1:?exit code not given to 'help' function}"
}

die () {
  echo "$(basename "$0"): error: $*" >&2
  help 1 >&2
}

quote () {
  # Quote $1 and replace ' by '\'' inside it.
  echo "'$(echo "$1" | sed "s/'/'\\\\''/g")'"
}

while getopts ':hanml' opt; do
  case "$opt" in
    h) help 0 ;;
    m) run_mac=1 ;;
    l) run_linux=1 ;;
    :) die "option requires an argument: -$OPTARG" ;;
    *) die "unknown option: -$OPTARG" ;;
  esac
done
shift $((OPTIND - 1))

# If neither of -m -l is given, enable both.
if [ -z "$run_linux$run_mac" ]; then
  run_linux=1 run_mac=1
fi

# Don't quote the first arg, so we can do e.g. `pdci 'ls *'`
real_command=${1:?COMMAND is required$(die 'COMMAND is required')}
shift
for word in "$@"; do
  real_command="$real_command $(quote "$word")"
done

NOMAD_TOKEN=$(pass cern/ci/nomad-bootstrap-token | head -1)
export NOMAD_TOKEN
# List all CI jobs.
nomad job status |
  awk '/^ci-/ { print $1 }' |
  # Get running job allocations.
  xargs -rI '{}' nomad job status '{}' |
  awk '($6 == "running" && $3 == "ci") { print $1 }' |
  # Run command on each allocation, in parallel.
  xargs -rI '{}' -P 64 nomad alloc exec '{}' bash -c "$(cat << EOF
case \$(uname -s) in
  Linux)  [ -n "$run_linux" ] || exit 0 ;;
  Darwin) [ -n "$run_mac" ]   || exit 0 ;;
esac
# If sed understands -u, use it to avoid output being overly buffered.
if sed -u d /dev/null 2>/dev/null; then sed () { command sed -u "\$@"; }; fi
cd "\$NOMAD_TASK_DIR"
{ $real_command ; } 2>&1 | sed "s|^|\$(printf '%15s' "\$(hostname -s)"): {}: |"
EOF
)"
