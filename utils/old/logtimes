#!/usr/bin/env python3

'''Analyse timing information in alibuild logs.'''

import argparse
from datetime import datetime, timedelta
import io
import re
import sys

LOG_RE: re.Pattern = re.compile(rb'''
( \d{4}-\d{2}-\d{2}   @   # date
  \d{2}:\d{2}:\d{2} ) :   # time
(?: \x1b \[ [0-9;]* m )?  # ANSI escape for log level
  [A-Z]+                  # log level name
(?: \x1b \[ m )?      :   # "reset" ANSI escape code
  [^:\s]+             :   # final package name
( [^:\s]+ )           :   # current package name -- capture this
  [^:\s]+             :   # branch name / aliBuild -z arg
\s                        # final space after log prefix
# log message follows, but we don't care about it
''', re.VERBOSE)


def build_duration(package: bytes | None,
                   start_time: bytes | None,
                   end_time: bytes | None) -> list[tuple[timedelta, bytes]]:
    '''Return a record of the duration of the build of the given package.'''
    if package is None:
        return []
    if start_time is None or end_time is None:
        duration = timedelta(0)
    else:
        duration = (datetime.fromisoformat(end_time.decode('utf-8')) -
                    datetime.fromisoformat(start_time.decode('utf-8')))
    return [(duration, package)]


def output(durations: list[tuple[timedelta, bytes]],
           output_file: io.TextIOBase) -> None:
    '''Print durations and package names from the given list, in order.'''
    for duration, package in durations:
        print(duration, package.decode('utf-8'), sep='\t', file=output_file)


def main(args: argparse.Namespace) -> None:
    '''Script entry point.'''
    durations: list[tuple[timedelta, bytes]] = []
    cur_pkg_name: bytes | None = None
    cur_start_time: bytes | None = None
    cur_end_time: bytes | None = None

    def new_package(name, start, end, durations):
        new_durations = build_duration(name, start, end)
        if args.ordering == 'chrono':
            output(new_durations, args.output_file)
        else:
            durations += new_durations

    for line in args.logfile:
        if not (match := LOG_RE.match(line)):
            continue
        timestr, package = match.groups()
        if package == cur_pkg_name:
            # This is still the same package. Just update the end time.
            cur_end_time = timestr
            continue
        # This log line now comes from a new package!
        # Register the last package's build duration and reset our variables.
        new_package(cur_pkg_name, cur_start_time, cur_end_time, durations)
        cur_pkg_name = package
        cur_start_time = cur_end_time = timestr
    # Make sure the last build in the file is registered, too.
    new_package(cur_pkg_name, cur_start_time, cur_end_time, durations)

    # Now sort and output the registered build durations, if necessary.
    if args.ordering == 'duration':
        output(sorted(durations, key=lambda pair: pair[1], reverse=True),
               args.output_file)
    elif args.ordering != 'chrono':
        raise ValueError('unknown ordering:', args.ordering)


def parse_args() -> argparse.Namespace:
    '''Parse and return command-line arguments.'''
    parser = argparse.ArgumentParser(description=__doc__)
    sorting = parser.add_mutually_exclusive_group()
    sorting.add_argument(
        '-t', '--chrono-order',
        dest='ordering', action='store_const', const='chrono',
        help='output packages in build order, earliest first (default)')
    sorting.add_argument(
        '-d', '--duration-order',
        dest='ordering', action='store_const', const='duration',
        help='output packages in order of build duration, longest first')
    sorting.set_defaults(ordering='chrono')
    parser.add_argument(
        '-o', '--output-file', metavar='FILE',
        type=argparse.FileType('w'), default='-',
        help='where to output the resulting table (default stdout)')
    parser.add_argument(
        'logfile', metavar='LOGFILE', nargs='?',
        type=argparse.FileType('rb'), default='-',
        help='alibuild log file to analyse (default stdin)')
    return parser.parse_args()


if __name__ == '__main__':
    try:
        main(parse_args())
    except KeyboardInterrupt:
        sys.exit(130)
    except BrokenPipeError:
        pass
