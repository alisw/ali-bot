#!groovy
node ("scheduler") {

  stage 'Secrets Setup'
  withCredentials([[$class: 'FileBinding', credentialsId: '0dd617a6-6b27-4904-becc-51e4cd56eae8', variable: 'GIT_CREDS_FILE']]) {
    withEnv(["BUILDER_USER=${BUILDER_USER}",
             "BUILDER_EMAIL=${BUILDER_EMAIL}"
      ]) {
      sh '''
        git credential-store --file ~/git-creds store < ${GIT_CREDS_FILE}
        git config --global credential.helper "store --file ~/git-creds"
        ls ~/git-creds
        mkdir -p $HOME/.ssh
        git config --replace-all --global user.name ${BUILDER_USER:-alibuild}
        git config --replace-all --global user.email ${BUILDER_EMAIL:-alibuild@cern.ch}
      '''
    }
  }
  stage 'Checkout repositories'
  def workspace = pwd()
  parallel (
    checkout_aliroot: {
      sh """
        rm -rf AliRoot 
        time git clone --reference /build/mirror/aliroot http://git.cern.ch/pub/AliRoot AliRoot
      """},
    checkout_aliphysics: {
      sh """
        rm -rf AliPhysics
        time git clone --reference /build/mirror/aliphysics http://git.cern.ch/pub/AliPhysics AliPhysics
      """},
    checkout_results: {
      sh """
        rm -fr aliphysics-coverage
        time git clone -b gh-pages git@github.com:${DESTINATION_REPO}/aliphysics-coverage
      """}
    )

    stage 'Process and commit results'
    withEnv(["WORKSPACE=${workspace}"]) {
      sh '''
        alibuild/aliBuild --defaults coverage build AliRoot-test

        eval $(alibuild/alienv load AliRoot/latest)
        lcov --capture --directory sw/osx_x86-64/profile-data --output-file coverage.info
        genhtml coverage.info --output-directory aliphysics-coverage

        cd aliphysics-coverage
        git add .
        git commit -m 'Updated results.' || true
        git push origin master
      '''
    }
}
