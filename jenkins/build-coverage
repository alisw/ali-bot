#!groovy
node ("scheduler") {

  stage 'Secrets Setup'

  withCredentials([[$class: 'StringBinding',
                    credentialsId: 'alibuild-ssh-vault-token', variable: 'VAULT_TOKEN']]) {
    withEnv(["VAULT_ADDR=${VAULT_ADDR}",
             "VAULT_SKIP_VERIFY=1"]) {
      retry (3) {
        sh """
        mkdir -p /root/.ssh
        git config --global user.name ${BUILDER_USER}
        git config --global user.email ${BUILDER_EMAIL}
        [[ ! -f /root/.ssh/id_rsa ]] && vault read -field=ssh-key ${VAULT_SECRET_PATH} > /root/.ssh/id_rsa
        [[ ! -f /root/.ssh/known_hosts ]] && vault read -field=ssh-known-hosts ${VAULT_SECRET_PATH} > /root/.ssh/known_hosts
        echo >> /root/.ssh/known_hosts
        chmod 750 /root/.ssh
        chmod 400 /root/.ssh/id_rsa
        """
      }
    }
  }

  stage 'Checkout repositories'
  def workspace = pwd()
  parallel (
    checkout_aliroot: {
      sh """
        rm -rf AliRoot 
        time git clone --reference /build/mirror/aliroot http://git.cern.ch/pub/AliRoot AliRoot
      """},
    checkout_aliphysics: {
      sh """
        rm -rf AliPhysics
        time git clone --reference /build/mirror/aliroot http://git.cern.ch/pub/AliPhysics AliPhysics
      """},
    checkout_results: {
      sh """
        rm -fr aliphysics-coverage
        time git clone -b gh-pages git@github.com:${DESTINATION_REPO}/aliphysics-coverage
      """}
    )

    stage 'Process and commit results'
    withEnv(["WORKSPACE=${workspace}"]) {
      sh '''
        alibuild/aliBuild --defaults coverage build AliRoot-test

        eval $(alibuild/alienv load AliRoot/latest)
        lcov --capture --directory sw/osx_x86-64/profile-data --output-file coverage.info
        genhtml coverage.info --output-directory aliphysics-coverage

        cd aliphysics-coverage
        git add .
        git commit -m 'Updated results.' || true
        git push origin master
      '''
    }
}
