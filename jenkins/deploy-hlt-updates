#!groovy
node ("slc7_x86-64-light") {

  stage "Get Ansible"
  sh '''
    set -e
    set -o pipefail
    pip install --ignore-installed ansible
  '''

  try {
    stage "Get configuration"
    retry (3) {
      timeout(600) {
        withEnv (["GIT_URL=${env.GIT_URL}",
                  "GIT_BRANCH=${env.GIT_BRANCH}"]) {
          git changelog     : false,
              poll          : false,
              credentialsId : '369b09bf-5f5e-4b68-832a-2f30cad28755',
              url           : "${GIT_URL}",
              branch        : "${GIT_BRANCH}"
        }
      }
    }

    stage "Obtain Ansible vault password"
    withCredentials([[$class        : 'StringBinding',
                      credentialsId : "alihltcloud-ansible-vault",
                      variable      : 'MY_ANSIBLE_VAULT']]) {
      sh '''
        set -e
        set -o pipefail
        rm -f ansible/.vault_password
        echo "$MY_ANSIBLE_VAULT" > ansible/.vault_password
        chmod 0400 ansible/.vault_password
      '''
    }

    stage "Deploy configuration"
    def limitHosts = TARGET_HOSTS.split(',')
    for (i=0; i<limitHosts.size(); i++) {
      limitHosts[i] = limitHosts[i]+".*"
    }
    timeout(1800) {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withEnv (["VAULT_ADDR=https://alimesos01.cern.ch:8200"]) {
          ansiblePlaybook colorized     : true,
                          credentialsId : 'hltcloud-ssh',
                          inventory     : "ansible/inventory/hltvoboxes",
                          limit         : limitHosts.join(","),
                          playbook      : 'ansible/site.yml',
                          sudo          : true,
                          extras        : '--vault-password-file ansible/.vault_password'
        }
      }
    }
  }
  catch (e) {
    // Notify failures
    emailext(subject: "Update HLT configuration failed",
             body: "More details here: ${env.BUILD_URL}",
             to: "${NOTIFY_EMAILS}")
    throw e
  }
}
