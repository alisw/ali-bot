#!groovy
try {
  stage('Construct tag name') {
    currentBuild.displayName = ("#${env.BUILD_NUMBER} - $PACKAGES $DEFAULTS $ARCHITECTURE")
    /* Get the start time now, before waiting for PRs, because waiting can take
     * hours, and that would mean we use the incorrect date to name the tag.
     * Unfortunately, we're not permitted to use Date.toInstant in Jenkins, so
     * run date instead. For that, we need any node.
     */
    node {
      start_time = sh(script: "LANG=C date +%s", returnStdout: true).trim()
    }
  }

  stage "Wait pull requests"
  if ("$WAIT_PR" == "true") {
    node ("slc7_x86-64-light") {
      timeout (240) {
        withEnv(["ALIBOT_SLUG=${ALIBOT_SLUG}",
                 "WAIT_PR_LIMIT=${WAIT_PR_LIMIT}",
                 "PACKAGES=${PACKAGES}"]) {
          withCredentials([[$class: 'StringBinding',
                            credentialsId: 'github_token',
                            variable: 'GITHUB_TOKEN']]) {
            sh '''
              set -e
              echo $GITHUB_TOKEN > ~/.github-token
              chmod 0600 ~/.github-token
              # Use pip to get the Python scripts (with all the correct dependencies)
              export PYTHONUSERBASE="$PWD/localpython"
              export PATH="$PYTHONUSERBASE/bin:$PATH"
              rm -rf "$PYTHONUSERBASE"
              yum install -y python3-pip python3-devel python3-setuptools
              pip3 install --user --upgrade "${ALIBOT_SLUG:+git+https://github.com/${ALIBOT_SLUG}}"
              type check-open-pr
              if [ "${PACKAGES%% *}" = AliPhysics ]; then
                WAIT_TESTS="build/AliPhysics/release build/AliPhysics/root6"
              else
                WAIT_TESTS="build/${PACKAGES%% *}/release"
              fi
              while ! check-open-pr $WAIT_PR_LIMIT "alisw/${PACKAGES%% *}" $WAIT_TESTS; do
                echo "Waiting for all pull requests to be merged"
                sleep 120
              done
            '''
          }
        }
      }
    }
  } else {
    println("Not waiting for open pull requests")
  }

  node ("$ARCHITECTURE-$MESOS_QUEUE_SIZE") {

    stage "Config credentials"
    withCredentials([[$class: 'UsernamePasswordMultiBinding',
                      credentialsId: 'github_alibuild',
                      usernameVariable: 'GIT_BOT_USER',
                      passwordVariable: 'GIT_BOT_PASS']]) {
      sh '''
          set -e
          set -o pipefail
          printf "protocol=https\nhost=github.com\nusername=$GIT_BOT_USER\npassword=$GIT_BOT_PASS\n" | \
            git credential-store --file $PWD/git-creds store
        '''
    }
    withCredentials([[$class: 'UsernamePasswordMultiBinding',
                      credentialsId: '369b09bf-5f5e-4b68-832a-2f30cad28755',
                      usernameVariable: 'GIT_BOT_USER',
                      passwordVariable: 'GIT_BOT_PASS']]) {
      sh '''
          set -e
          set -o pipefail
          printf "protocol=https\nhost=git.cern.ch\nusername=$GIT_BOT_USER\npassword=$GIT_BOT_PASS\n" | \
            git credential-store --file $PWD/git-creds store
        '''
    }
    withCredentials([[$class: 'UsernamePasswordMultiBinding',
                      credentialsId: 'gitlab_alibuild',
                      usernameVariable: 'GIT_BOT_USER',
                      passwordVariable: 'GIT_BOT_PASS']]) {
      sh '''
          set -e
          set -o pipefail
          printf "protocol=https\nhost=gitlab.cern.ch\nusername=$GIT_BOT_USER\npassword=$GIT_BOT_PASS\n" | \
            git credential-store --file $PWD/git-creds store
        '''
    }
    sh '''
        set -e
        git config --global credential.helper "store --file $PWD/git-creds"
        ls -l $PWD/git-creds
      '''

    stage "Create daily"
    timeout (480) {
      retry (2) {
        withEnv(["START_TIMESTAMP=" + start_time.toString()]) {
          sh '''
              set -ex
              [ -d /etc/profile.d/enable-alice.sh ] && source /etc/profile.d/enable-alice.sh
              export PYTHONUSERBASE=${PWD}/python-bin
              export PATH=${PYTHONUSERBASE}/bin:$PATH
              export LD_LIBRARY_PATH=${PYTHONUSERBASE}/lib:${LD_LIBRARY_PATH}
              echo $NODE_NAME
              case $NODE_NAME in
                *slc6*)
                  # python3 is not installed on the slc6-builder. Installing it seems to break the build.
                  pip=pip2 ;;
                *ubuntu*)
                  # On Ubuntu 20.04, pip is pip3. (On Ubuntu 18.04, it's still pip2.)
                  pip=pip ;;
                *slc8*)
                  export ALIBUILD_O2_FORCE_GPU=1
                  export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:+$CMAKE_PREFIX_PATH:}/opt/rocm/lib/cmake:/opt/clang/lib/cmake
                  export AMDAPPSDKROOT=/opt/amd-app
                  export PATH=$PATH${PATH:+:}/usr/local/cuda/bin
                  pip=pip3 ;;
                *)
                  pip=pip3 ;;
              esac
              $pip install --upgrade --user "git+https://github.com/$ALIBOT_SLUG"
              [ -f /opt/rh/rh-git218/enable ] && source /opt/rh/rh-git218/enable
              daily-tags.sh || err=$?
              rm -rf alidist daily-tags.?????????? mirror
              exit ${err-0}
            '''
        }
      }
    }
  }
} catch (e) {
  // Notify failures
  emailext(subject: "${env.JOB_NAME}#${env.BUILD_NUMBER}: daily tag failed for ${PACKAGES}",
           body: "More details here: ${env.BUILD_URL}",
           to: "${NOTIFY_EMAILS}")
  throw e
}
