; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

(require '[clj-http.client :as client])
(require '[riemann.common :refer [unix-to-iso8601]])

; Use elasticsearch as an event sync whenever you want to push events
; to our elasticsearch instance. Events are batched ever 5 seconds to
; reduce overhead.

(defn logstash-v2-format
  "Convert an event to a Logstash V1 format compatible document"
  [event]
  (merge (dissoc event :time :attributes)
         (:attributes event)
         {"@timestamp" (unix-to-iso8601 (:time event))
          "@version" "2"
          "description" (or (:description event) "")
          }))

; Create a date which is ok for elasticsearch indices
(def elasticsearch-host (System/getenv "ELASTICSEARCH_HOST"))
(if elasticsearch-host
  [
    (load-plugin "elasticsearch")
    (defn es-delete-index [index]
      (let  [url (str elasticsearch-host "/" index)]
            (do
              (info url)
              (client/delete url {:throw-exceptions false})
            )
      )
    )
    (eval '(def elasticsearch-sink
             (async-queue! :elasticsearch {:queue-size 1e3 :core-pool-size 4 :max-pool-size 4}
                           (batch 1000 5
                             (elasticsearch/elasticsearch-sync {:url elasticsearch-host
                                                                :type-fn :type
                                                                :format-fn logstash-v2-format
                                                                :index-fn (fn [e] (elasticsearch/logstash-time-index 
                                                                (str (:index e) "-") e))
                                                               }
                             )
                           )
             )
           )
    )
  ]
  [
    (defn es-delete-index [index] ())
    (defn elasticsearch-sink [event] ())
  ]
)

; Slack configuration
(let
    [
      token   (or (System/getenv "SLACK_TOKEN") "")
      org     (or (System/getenv "SLACK_ORG") "alisw")
      user    (or (System/getenv "SLACK_USER") "ali-bot")
      channel (or (System/getenv "SLACK_CHANNEL") "#monitoring")
      credentials {:account org :token token}
    ]
    (if token
      [
        (def slacker
            (slack credentials {:username user :channel channel})
        )
        (def buildinfrastructure-slack
            (slack credentials {:username user :channel "#buildinfrastructure" })
        )
      ]
      [
        (def slacker (fn [evt] ()))
        (def buildinfrastructure-slack (fn [evt] ()))
      ]
    )
)

; Calculate the lifetime of a given elasticsearch index given its name
(require '[clj-time.core :as t])
(require '[clj-time.format :as tf])
(require '[clj-time.local :as lt])
(defn es-index-lifetime-with-now [i now]
    (let [textDate (nth (re-matches #"^[.]*.+[.-](20[0-9][0-9][.][0-9][0-9][.][0-9][0-9])" i) 1)
          dateFormatter (tf/formatter "yyyy.MM.dd")
          parsedDate (lt/to-local-date-time (tf/parse dateFormatter textDate))
         ]
    (t/in-seconds (t/interval parsedDate now)))
)

(defn es-index-lifetime [i]
  (es-index-lifetime-with-now i (lt/local-now))
)

; A few limits to monitor an healthy mesos cluster.
(def min_mesos_slaves 10)
(def max_mesos_task_staging 2)

; Report to slack only once per hour.
(def report-to-slack (throttle 1 3600 slacker))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)
(let [index (tap :index (index))]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (where
          (service #"^(?!proc).*")
          (fn [event] (info "expired" event))
        )
      )
    )


    ; Whenever we get an event with size of an elasticsearch index, we
    ; calculate its age and if more than 7 days old, we kill it.
    (where
      (service #"^elasticsearch index/.*20[0-9][0-9][.][0-9][0-9][.][0-9][0-9]/size_in_bytes")
      #(let [
              full-index-name (:service %)
              index-name (nth (re-matches #"elasticsearch index/([^/]+)/.*" full-index-name) 1)
              index-age (es-index-lifetime index-name)
            ]
             (if (> index-age 604800)
               (es-delete-index index-name ))
       )
    )

    ; Anything which comes from mesos goes to marathon every minute.
    ; Since many metrics for different services match, we use the 
    ; by service and by host to make sure we send at least one per kind per
    ; host.
    (where
      (service #"^mesos.*")
      (by [:host :service]
        (with {:type "metrics"
               :index "riemann-metrics"} 
              (throttle 1 60 elasticsearch)
        )
      )
    )

    ; Process metrics get accumulated every 60 seconds and sent to elasticsearch.
    (where
      (service #"^proc .*")
      (by [:host :service]
        (with {:type "metrics"
               :index "riemann-metrics"}
              (throttle 1 60 elasticsearch-sink)
        )
      )
    )

    ; Send disk information to elasticsearch, once per half hour
    (where
      (service #"^disk.*")
      (by [:host :service]
        (with {:type "metrics"
               :index "riemann-metrics"}
              (throttle 1 60 elasticsearch-sink)
        )
      )
    )

    ; When we have a too active few mesos slaves, notify slack.    
    (where
      (and
        (not (expired? event))
        (service #"mesos master/slaves_active")
        (< metric min_mesos_slaves)
      )
      (throttle 1 3600 slacker)
    )

    ; "mesos health" expired, means Mesos checks have troubles.
    ; We throttle by 60 seconds to avoid flip-floppings.
    (changed-state {:init "ok"}
      (where
        (service #"mesos slave/health")
        (throttle 1 60 slacker)
      )
    )

    ; Consider ok a mesos slave which has more than one cpu.
    (where
      (service #"mesos slave/resources/cpus")
      (with {:service "mesos slave/health"
             :state "ok"
             :metric 1
             :ttl 60
            } reinject)
    )
    ; "marathon health" expired, means marathon checks have troubles.
    ; We throttle by 60 seconds to avoid flip-floppings.
    (changed-state {:init "ok"}
      (where
        (service #"marathon health")
        (throttle 1 60 slacker)
      )
    )

    ; When we have a too many task staging, it means we might have a
    ; stuck node. If this happens for more than 5 minutes, in a row,
    ; warn.
    (where
      (and
        (not (expired? event))
        (service #"mesos master/tasks_staging")
        (> metric max_mesos_task_staging)
      )
      (stable 300 (fn [e] (> (:metric e) max_mesos_task_staging)) 
        (throttle 1 3600 slacker))
    )

    ; When the master is not elected, we are in trouble
    (where
      (and
        (not (expired? event))
        (service #"mesos master/elected")
        (== metric 0)
      )
      (throttle 1 3600 slacker)
    )

    ; Monitor Marathon apps and report to slack when the number of instances
    ; drops to 0.
    (where
      (and
          (not (expired? event))
          (service #"marathon apps/.*/tasksRunning")
          (== metric 0)
      )
      (by [:service] (throttle 1 3600 slacker))
    )

    ; Any monitored disk above 50% usage should be a warning.
    (where
      (and
        (not (expired? event))
        (service #"disk /.*")
        (host #"alibuild.*")
        (< 0.5 metric 0.8)
      )
      (with {:state "warning"} index)
      (with {:state "warning"} (by [:host] (throttle 1 86400 buildinfrastructure-slack)))
    )
    ; Any monitored disk above 80% usage should be a critical.
    (where
      (and
        (not (expired? event))
        (service #"disk /.*")
        (host #"alibuild.*")
        (> metric 0.8)
      )
      (with {:state "critical"} index)
      (with {:state "critical"} (by [:host] (throttle 1 3600 buildinfrastructure-slack)))
    )

    ; Send events with critical state in alibuild_log to be slack.
    (where
      (and
        (service #"alibuild_log")
        (state "critical")
      )
      slacker
    )

    ; Create separate streams for entries in alibuild_log streams which
    ; have error: or warning: in the description.
    ; Error remain in the index for 3600 seconds.
    ; We set the metric to 1 so that we can count them, if needed afterwards
    (where
      (and
        (description #".*error:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_error"
            :ttl 3600
            :metric 1
            :state "critical"
            } index)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
             :index "build_errors"
            } elasticsearch-sink)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
            } slacker)
    )
    (where
      (and
        (description #".*warning:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_warning"
             :ttl 3600
             :metric 1
             :state "warning"
            } index)
      (with {:service "build_warning"
             :state "warning"
             :type "build_warning"
             :index "build_errors"
            } elasticsearch-sink)
    )

   )
)

; Enable repl if DEBUG environment variable is defined
(if (System/getenv "DEBUG")
    (repl-server {:host "0.0.0.0"})
)

(defn simple-add [a b] (+ a b))
(print simple-add)
(print (simple-add 1 1))
; A few tests
(tests
  (let
    [
      date-time     clj-time.core/date-time
      to-local-date-time clj-time.local/to-local-date-time
    ]
    [
      (deftest default-ttl-test
        (is (= (inject! [{:service "test" 
                          :time    1}])
               {:index [{:service "test"
                         :time    1
                         :ttl     60}]})
        )
      )
      (deftest check-functions
        (is (= (riemann.config/simple-add 1 1) 2)
        )
      )
      (deftest index-life-time
        (is (= (riemann.config/es-index-lifetime-with-now "foo-2016.09.27" (to-local-date-time (date-time 2016 9 28))) 86400))
      )
    ]
  )
)
